Private Module SolvUtils

    ' ==========================================================================
    ' SolverWrapper v1.1
    '
    ' A wrapper for automating MS Excel's Solver Add-in
    '
    ' https://github.com/GCuser99/SolverWrapper
    '
    ' Contact Info:
    '
    ' https://github.com/GCUser99
    ' ==========================================================================
    ' MIT License
    '
    ' Copyright (c) 2024, GCUser99 (https://github.com/GCuser99/SolverWrapper)
    '
    ' Permission is hereby granted, free of charge, to any person obtaining a copy
    ' of this software and associated documentation files (the "Software"), to deal
    ' in the Software without restriction, including without limitation the rights
    ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    ' copies of the Software, and to permit persons to whom the Software is
    ' furnished to do so, subject to the following conditions:
    '
    ' The above copyright notice and this permission notice shall be included in all
    ' copies or substantial portions of the Software.
    '
    ' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    ' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    ' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    ' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    ' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    ' SOFTWARE.
    ' ==========================================================================
    'Option Private Module
    Option Explicit

    'used to denote "infinite" for several of the solver option parameters such as MaxIterations and MaxTime
    Public Const MAXVALUE As Long = &H7FFFFFFF
    Public Const nameVisible = False 'True to aid debugging
    Public solverNames As Collection

    Public Application As Excel.Application

    ' ==========================================================================
    ' Public members
    ' ==========================================================================

    Public Function CellRefToRange(ByVal cellRef As Variant, Optional ws As Worksheet) As Range
        Dim i As Long
        Dim tmp As Range
    
        If ws Is Nothing Then Set ws = Application.ActiveSheet
    
        If IsObject(cellRef) Then
            Select Case TypeName(cellRef)
            Case "Range"
                Set tmp = cellRef
            Case "Name"
                Set tmp = cellRef.RefersToRange
            Case Else
                Err.Raise 4001, , "Must specify a valid range in the form of a Range/Name object, or Range/Name string"
            End Select
        ElseIf IsArray(cellRef) Then
            Set tmp = CellRefToRange(cellRef(LBound(cellRef)), ws)
            For i = LBound(cellRef) + 1 To UBound(cellRef)
                Set tmp = ProperUnion(tmp, CellRefToRange(cellRef(i), ws))
            Next i
        Else
            On Error GoTo EH
            Set tmp = ws.Range(cellRef)
        End If
    
        Set CellRefToRange = RemoveRangeOverlap(tmp)
        Exit Function
    EH:
        Err.Raise 1001, , "Error in CellRefToRange: """ & cellRef & """ is not a valid Cell Reference"
    End Function

    Public Function CellRefToString(ByVal cellRef As Variant, Optional ws As Worksheet) As String
        Dim tmp As String
        tmp = CellRefToRange(cellRef, ws).Address
        If Application.International(xlListSeparator) <> "," Then
            tmp = Replace(tmp, Application.International(xlListSeparator), ",")
        End If
        If Application.ReferenceStyle = xlR1C1 Then
            tmp = Application.ConvertFormula(tmp, xlR1C1, xlA1)
        End If
        CellRefToString = tmp
    End Function

    Public Function NameExists(ByVal stringName As String, Optional ws As Worksheet) As Boolean
        Dim errTest As String
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        On Error GoTo EH
        errTest = ws.Names.Item(stringName).Value
        NameExists = True
        Exit Function
    EH:
        NameExists = False
    End Function

    Public Sub DeleteName(ByVal stringName As String, Optional ws As Worksheet)
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        If NameExists(stringName) Then ws.Names(stringName).Delete
    End Sub

    Public Sub InitSolver(Optional ws As Worksheet, Optional ByVal initModel As Boolean = True, Optional ByVal initSolverOptions As Boolean = True, Optional ByVal initStatusBarNames As Boolean = True)
        Dim savCalculationMode As XlCalculation
        If ws Is Nothing Then Set ws = Application.ActiveSheet
    
        savCalculationMode = Application.Calculation
        Application.Calculation = xlCalculationManual
    
        On Error Resume Next
    
        If initModel Then
            'worksheet-level model definition names
            With ws.Names
                .Add "solver_typ", 1, nameVisible
                .Add "solver_val", 0, nameVisible
                .Add "solver_eng", slvGRG_Nonlinear, nameVisible
                .Add "solver_ver", 3, nameVisible
                .Add "solver_num", 0, nameVisible
            End With
        End If
    
        If initSolverOptions Then
            'worksheet-level names for solver options
            With ws.Names
                .Add "solver_cvg", 0.0001, nameVisible
                .Add "solver_drv", slvForward, nameVisible
                .Add "solver_est", slvTangent, nameVisible
                .Add "solver_itr", MAXVALUE, nameVisible
                .Add "solver_mip", MAXVALUE, nameVisible
                .Add "solver_mni", 30, nameVisible
                .Add "solver_mrt", 0.075, nameVisible
                .Add "solver_msl", 2, nameVisible
                .Add "solver_neg", 1, nameVisible
                .Add "solver_nod", MAXVALUE, nameVisible
                .Add "solver_nwt", slvNewton, nameVisible
                .Add "solver_pre", 0.000001, nameVisible
                .Add "solver_rbv", 1, nameVisible
                .Add "solver_rlx", 2, nameVisible
                .Add "solver_rsd", 0, nameVisible
                .Add "solver_scl", 1, nameVisible
                .Add "solver_sho", 2, nameVisible
                .Add "solver_ssz", 100, nameVisible
                .Add "solver_tim", MAXVALUE, nameVisible
                .Add "solver_tol", 0.01, nameVisible
            End With
        End If
    
        If initStatusBarNames Then
            'workbook-level names for status bar messaging
            With ws.Parent.Names
                .Add Name:="msg_setup", RefersTo:="Setting Up Problem...", Visible:=nameVisible
                .Add Name:="msg_trial", RefersTo:="Trial Solution:", Visible:=nameVisible
                .Add Name:="msg_branch", RefersTo:="Subproblem:", Visible:=nameVisible
                .Add Name:="msg_incumb", RefersTo:="Incumbent:", Visible:=nameVisible
                .Add Name:="msg_setcell", RefersTo:="Objective Cell:", Visible:=nameVisible
            End With
        End If

        Application.Calculation = savCalculationMode
    End Sub

    Public Sub DeleteSolverNames(Optional ByRef ws As Worksheet, Optional ByVal deleteModel As Boolean = True, Optional ByVal deleteSolverOptions As Boolean = True, Optional ByVal deleteStatusBarNames As Boolean = True)
        Dim savCalculationMode As XlCalculation
        Dim i As Long
        Dim nm As Name
        Dim nameString As String
    
        If ws Is Nothing Then Set ws = Application.ActiveSheet
    
        savCalculationMode = Application.Calculation
        Application.Calculation = xlCalculationManual
    
        On Error Resume Next
    
        If deleteModel Then
            For i = 1 To 10
                ws.Names(solverNames(i)).Delete
            Next i
        
            'delete constraints
            For Each nm In ws.Names
                nameString = nm.NameLocal
                If nameString Like "*!solver_rhs*" OrElse nameString Like "*!solver_lhs*" OrElse nameString Like "*!solver_rel*" Then
                    nm.Delete
                End If
            Next nm
        End If
            
        If deleteSolverOptions Then
            For i = 11 To 30
                ws.Names(solverNames(i)).Delete
            Next i
        End If
    
        If deleteStatusBarNames Then
            For i = 31 To 35
                ws.Parent.Names(solverNames(i)).Delete
            Next i
        End If
    
        Application.Calculation = savCalculationMode
    End Sub

    Public Function NameToDbl(ByVal nameString As String, Optional ws As Worksheet) As Double
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        NameToDbl = CDbl(Mid$(CStr(ws.Names(nameString).RefersToLocal), 2))
    End Function

    Public Function NameToInt(ByVal nameString As String, Optional ws As Worksheet) As Integer
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        NameToInt = CInt(Mid$(CStr(ws.Names(nameString).RefersToLocal), 2))
    End Function

    Public Function NameToLong(ByVal nameString As String, Optional ws As Worksheet) As Long
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        NameToLong = CLng(Mid$(CStr(ws.Names(nameString).RefersToLocal), 2))
    End Function

    Public Function NameToString(ByVal nameString As String, Optional ws As Worksheet) As String
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        NameToString = Mid$(CStr(ws.Names(nameString).RefersToLocal), 2)
    End Function

    Public Function NameToRange(n As Name) As Range
        On Error Resume Next
        Set NameToRange = n.RefersToRange
        On Error GoTo 0
    End Function

    'checks if cell range string represents a single contiguous cell area
    Public Function CellRefHasOneArea(ByVal thecells As Variant, Optional ws As Worksheet) As Boolean
        If ws Is Nothing Then Set ws = Application.ActiveSheet
        On Error Resume Next
        CellRefHasOneArea = (ws.Range(thecells).Areas.Count <= 1)
        On Error GoTo 0
    End Function

    'this function subtracts the intersection between two ranges from one of the ranges
    Public Function SubtractRangeFromRange(subtractRange As Range, fromRange As Range) As Range
        Dim cell As Range
        For Each cell In fromRange
            If Application.Intersect(cell, subtractRange) Is Nothing Then
                If SubtractRangeFromRange Is Nothing Then
                    Set SubtractRangeFromRange = cell
                Else
                    Set SubtractRangeFromRange = Application.Union(SubtractRangeFromRange, cell)
                End If
            End If
        Next cell
    End Function

    'this function tests if two ranges refer to the same cells
    Public Function IsRangeSameRange(testRange As Range, compareToRange As Range) As Boolean
        Dim r As Range, testRangeU As Range, compareToRangeU As Range
        IsRangeSameRange = False
        On Error Resume Next
        Set r = Application.Union(testRange, compareToRange)
        On Error GoTo 0
        If r Is Nothing Then
            IsRangeSameRange = False
            Exit Function
        End If
        Set testRangeU = Application.Union(testRange, testRange) 'this is needed to convert range("a1,a1:a5") to range("a1:a5")
        Set compareToRangeU = Application.Union(compareToRange, compareToRange)
        If testRangeU.Count = compareToRangeU.Count Then
            If testRangeU.Count = r.Count Then IsRangeSameRange = True
        End If
    End Function

    'this function determines whether one range is a subset of another
    Public Function IsRangeInRange(testRange As Range, inRange As Range) As Boolean
        Dim r As Range
        IsRangeInRange = False
        On Error Resume Next
        Set r = Application.Intersect(testRange, inRange)
        On Error GoTo 0
        If r Is Nothing Then
            IsRangeInRange = False
            Exit Function
        End If
        'if testRange has same cell count as the intersection of testRange and inRange, then it's in
        IsRangeInRange = (testRange.Count = r.Count)
    End Function

    Public Function Max(ParamArray numberList() As Variant) As Variant
        Dim i As Long
        Max = numberList(LBound(numberList))
        For i = LBound(numberList) + 1 To UBound(numberList)
            If numberList(i) > Max Then Max = numberList(i)
        Next i
    End Function

    Public Function Min(ParamArray numberList() As Variant) As Variant
        Dim i As Long
        Min = numberList(LBound(numberList))
        For i = LBound(numberList) + 1 To UBound(numberList)
            If numberList(i) < Min Then Min = numberList(i)
        Next i
    End Function

    Public Function FlipArray(myArray() As Variant) As Variant()
        Dim col As Long
        Dim row As Long
        Dim colUpper As Long
        Dim rowUpper As Long
        Dim colLower As Long
        Dim rowLower As Long
        Dim tempArray() As Variant
        Dim j As Long
    
        colUpper = UBound(myArray, 2)
        rowUpper = UBound(myArray, 1)
        colLower = LBound(myArray, 2)
        rowLower = LBound(myArray, 1)
    
        tempArray = myArray
    
        j = rowLower
        For row = rowUpper To rowLower + 1 Step -1
            j = j + 1
            For col = colLower To colUpper
                tempArray(j, col) = myArray(row, col)
            Next col
        Next row
        FlipArray = tempArray
    End Function

    Public Function TransposeArray(myArray() As Variant) As Variant()
        Dim col As Long
        Dim row As Long
        Dim colUpper As Long
        Dim rowUpper As Long
        Dim colLower As Long
        Dim rowLower As Long
        Dim tempArray() As Variant
        colUpper = UBound(myArray, 2)
        rowUpper = UBound(myArray, 1)
        colLower = LBound(myArray, 2)
        rowLower = LBound(myArray, 1)
        ReDim tempArray(colLower To colUpper, rowLower To rowUpper)
        For col = colLower To colUpper
            For row = rowLower To rowUpper
                tempArray(col, row) = myArray(row, col)
            Next row
        Next col
        TransposeArray = tempArray
    End Function

    Public Sub VariantToRange(a() As Variant, r As Range, Optional ByVal OutputColumn As Boolean = True)
        Dim temp() As Variant, i As Long, numRows As Long, numcols As Long
        If Is1DVariant(a) Then
            If OutputColumn Then
                numRows = UBound(a)
                numcols = 1
                ReDim temp(1 To numRows, 1 To 1)
                For i = 1 To numRows
                    temp(i, 1) = a(i)
                Next i
            Else
                numRows = 1
                numcols = UBound(a)
                ReDim temp(1 To 1, 1 To numcols)
                For i = 1 To numcols
                    temp(1, i) = a(i)
                Next i
            End If
            r.Resize(numRows, numcols).Value = temp 'fast way of loading back to sheet
        Else
            numRows = UBound(a, 1)
            numcols = UBound(a, 2)
            r.Resize(numRows, numcols).Value = a 'fast way of loading back to sheet
        End If
    End Sub

    Public Sub RemoveArrayDups(a() As Variant)
        Dim dup As Boolean
        Dim i As Long, j As Long, k As Long
        k = LBound(a, 2)
        For j = LBound(a, 2) + 1 To UBound(a, 2)
            dup = True
            For i = LBound(a, 1) To UBound(a, 1)
                If a(i, j) <> a(i, k) Then
                    dup = False
                    Exit For
                End If
            Next i
            If Not dup Then
                k = k + 1
                For i = LBound(a, 1) To UBound(a, 1)
                    a(i, k) = a(i, j)
                Next i
            End If
        Next j
        ReDim Preserve a(LBound(a, 1) To UBound(a, 1), LBound(a, 2) To k)
    End Sub

    Public Sub RemoveArrayInvalids(a() As Variant)
        Dim i As Long, j As Long, k As Long
        k = 0
        j = 1
        For i = LBound(a, 2) + 1 To UBound(a, 2)
            If a(UBound(a, 1), i) Then
                j = j + 1
                For k = LBound(a, 1) To UBound(a, 1)
                    a(k, j) = a(k, i)
                Next k
            End If
        Next i
        ReDim Preserve a(LBound(a, 1) To UBound(a, 1), LBound(a, 2) To j)
    End Sub

    Public Function RoundNum(ByVal number As Double, Optional ByVal numDigitsAfterDecimal As Long = 0, Optional ByVal midpointAwayFromZero As Boolean = True) As Double
    'adapted from https://stackoverflow.com/questions/11742994/how-to-round-to-a-certain-number-of-significant-figures-using-excel-vba/15976194#15976194
        If midpointAwayFromZero Then
            Dim factor As Double
            factor = 10 ^ numDigitsAfterDecimal
            RoundNum = Fix(number * factor + 0.5 * Sgn(number)) / factor
        Else
            'banker's or midpoint rounding - round towards the nearest even integer
            RoundNum = Round(number, numDigitsAfterDecimal)
        End If
    End Function

    Public Function ReturnSolverMsg(ByVal solverResult As Long) As String
        Select Case solverResult
            Case 0
                ReturnSolverMsg = "Solver found a solution. All constraints and optimality conditions are satisfied (0)."
            Case 1
                ReturnSolverMsg = "Solver has converged to the current solution. All constraints are satisfied (1)."
            Case 2
                ReturnSolverMsg = "Solver cannot improve the current solution. All constraints are satisfied (2)."
            Case 3
                ReturnSolverMsg = "Stop chosen when the maximum iteration limit was reached (3)."
            Case 4
                ReturnSolverMsg = "The Objective Cell values do not converge (4)."
            Case 5
                ReturnSolverMsg = "Solver could not find a feasible solution (5)."
            Case 6
                ReturnSolverMsg = "Solver stopped at user's request (6)."
            Case 7
                ReturnSolverMsg = "The linearity conditions required by this LP Solver are not satisfied (7)."
            Case 8
                ReturnSolverMsg = "The problem is too large for Solver to handle - limited to 200 Decision cells and 100 non-Decision cell constraints (8)."
            Case 9
                ReturnSolverMsg = "Solver encountered an error value in the objective cell or a constraint cell (9)."
            Case 10
                ReturnSolverMsg = "Stop chosen when the maximum time limit was reached (10)."
            Case 11
                ReturnSolverMsg = "There is not enough memory available to solve the problem (11)."
            Case 12
                ReturnSolverMsg = "Message 12 - no documentation"
            Case 13
                ReturnSolverMsg = "Error in model. Please verify that all cells and constraints are valid (13)."
            Case 14
                ReturnSolverMsg = "Solver found an integer solution within tolerance. All constraints are satisfied (14)."
            Case 15
                ReturnSolverMsg = "Stop chosen when the maximum number of [integer or feasible] solutions was reached (15)."
            Case 16
                ReturnSolverMsg = "Stop chosen when the maximum number of [integer] subproblems was reached (16)."
            Case 17
                ReturnSolverMsg = "Solver converged in probability to a global solution (17)."
            Case 18
                ReturnSolverMsg = "All variables must have both upper and lower bounds (18)."
            Case 19
                ReturnSolverMsg = "Variable bounds conflict in binary or alldifferent constraint (19)."
            Case 20
                ReturnSolverMsg = "Lower and upper bounds on variables allow no feasible solution (20)."
            Case Else
                ReturnSolverMsg = "Solver encountered an unknown error."
        End Select
    End Function

    Public Function AreConstraintsSatisfied(ByRef ws As Worksheet) As Boolean
        Dim solver_num As Long
        Dim i As Long
        Dim rel As Long
        Dim lhs As Range
        Dim rhs As Range
        Dim adj As Range
        Dim cell As Range
        Dim j As Long
        Dim k As Long
        Dim prec As Double
        Dim precFact As Double
    
        prec = NameToDbl("solver_pre", ws)
    
        precFact = 1 + prec
    
        'find number of existing constraints
        solver_num = NameToLong("solver_num", ws)
    
        For i = 1 To solver_num
            'process each constraint
            rel = NameToLong("solver_rel" & i, ws)
            Select Case rel
            Case SlvRelation.slvLessThanEqual, SlvRelation.slvEqual, SlvRelation.slvGreaterThanEqual
                Set lhs = NameToRange(ws.Names("solver_lhs" & i))
                If IsNameRange(ws.Names("solver_rhs" & i)) Then
                    Set rhs = NameToRange(ws.Names("solver_rhs" & i))
                    If rhs.Count = lhs.Count Then
                        For j = 1 To lhs.Count
                            If IsNumeric(lhs(j).value) Then
                                If Not CompareValues(lhs(j).value, rel, rhs(j).value, prec) Then
                                    AreConstraintsSatisfied = False
                                    Exit Function
                                End If
                            Else
                                Err.Raise 4001, , "Constraint cell " & lhs.Address & " must evaluate to a number"
                            End If
                        Next j
                    Else
                        For j = 1 To lhs.Count
                            If IsNumeric(lhs(j).value) Then
                                If Not CompareValues(lhs(j).value, rel, rhs(1).value, prec) Then
                                    AreConstraintsSatisfied = False
                                    Exit Function
                                End If
                            Else
                                Err.Raise 4001, , "Constraint cell " & lhs.Address & " must evaluate to a number"
                            End If
                        Next j
                    End If
                Else
                    For Each cell In lhs
                        If IsNumeric(cell.Value) Then
                            If Not CompareValues(cell.Value, rel, NameToDbl("solver_rhs" & i, ws), prec) Then
                                AreConstraintsSatisfied = False
                                Exit Function
                            End If
                        Else
                            Err.Raise 4001, , "Constraint cell " & cell.Address & " must evaluate to a number"
                        End If
                    Next cell
                End If
            Case SlvRelation.slvInt
                Set lhs = NameToRange(ws.Names("solver_lhs" & i))
                For Each cell In lhs
                    If IsNumeric(cell.Value) Then
                        If Not CompareValues(1 + (cell.Value - RoundNum(cell.Value)), SlvRelation.slvEqual, 1#, prec) Then
                            AreConstraintsSatisfied = False
                            Exit Function
                        End If
                    Else
                        Err.Raise 4001, , "Constraint cell " & cell.Address & " must evaluate to a number"
                    End If
                Next cell
            Case SlvRelation.slvBin
                Set lhs = NameToRange(ws.Names("solver_lhs" & i))
                For Each cell In lhs
                    If IsNumeric(cell.Value) Then
                        If Not (CompareValues(cell.Value, SlvRelation.slvEqual, 1#, prec) OrElse CompareValues(cell.Value, SlvRelation.slvEqual, 0#, prec)) Then
                            AreConstraintsSatisfied = False
                            Exit Function
                        End If
                    Else
                        Err.Raise 4001, , "Constraint cell " & cell.Address & " must evaluate to a number"
                    End If
                Next cell
            Case SlvRelation.slvAllDif
                Set lhs = NameToRange(ws.Names("solver_lhs" & i))
                For j = 1 To lhs.Count
                    For k = 1 To lhs.Count
                        If j <> k Then
                            If IsNumeric(lhs(j).value) Then
                                If CompareValues(lhs(j).value, SlvRelation.slvEqual, lhs(k).value, prec) Then
                                    AreConstraintsSatisfied = False
                                    Exit Function
                                End If
                            Else
                                Err.Raise 4001, , "Constraint cell " & lhs.Address & " must evaluate to a number"
                            End If
                        End If
                    Next k
                Next j
            End Select
        Next i
    
        'this only applies if a decision variable does not have a lower limit
        If NameToLong("solver_neg", ws) = 1 Then
            Set adj = ws.Names("solver_adj").RefersToRange()
            For Each cell In adj
                If Not HasLowerBound(cell) Then
                    If cell.Value < 0 Then
                        AreConstraintsSatisfied = False
                        Exit Function
                    End If
                End If
            Next cell
        End If
    
        AreConstraintsSatisfied = True
    End Function

    Public Sub AddIterationToSolutions(ByRef solutions() As Variant, ByRef ws As Worksheet)
        Dim i As Long
        Dim r As Range
        Dim a As Range
        Dim decisionCells As Range
        Dim iter As Long
    
        Set decisionCells = ws.Names("solver_adj").RefersToRange
        iter = UBound(solutions, 2) + 1
        ReDim Preserve solutions(1 To decisionCells.Count + 2, 1 To iter)
        i = 0
        For Each a In decisionCells.Areas
            For Each r In a
                i = i + 1
                solutions(i, iter) = r.Value
            Next r
        Next a
        solutions(i + 1, iter) = ws.Names("solver_opt").RefersToRange.Value
        solutions(i + 2, iter) = AreConstraintsSatisfied(ws)
    End Sub

    Public Sub AddHeaderToSolutions(ByRef solutions() As Variant, ByRef ws As Worksheet)
        Dim i As Long
        Dim r As Range
        Dim a As Range
        Dim decisionCells As Range
    
        Set decisionCells = ws.Names("solver_adj").RefersToRange
    
        ReDim solutions(1 To decisionCells.Count + 2, 1 To 1)
        i = 0
        For Each a In decisionCells.Areas
            For Each r In a
                i = i + 1
                solutions(i, 1) = GetNameOfRange(r)
            Next r
        Next a
    
        solutions(i + 1, 1) = GetNameOfRange(ws.Names("solver_opt").RefersToRange)
        solutions(i + 2, 1) = "Valid"
    End Sub

    ' ==========================================================================
    ' Private members
    ' ==========================================================================

    Private Function CompareValues(ByVal lhs As Double, ByVal rel As SlvRelation, ByVal rhs As Double, ByVal prec As Double) As Boolean
        'used to assess whether a contraint is satisfied
        'reverse engineered from comparison tests on Solver results
        Dim epsilon As Double
        epsilon = 1E-20
        CompareValues = False
        Select Case rel
        Case slvEqual
            If rhs = 0# OrElse lhs = 0# Then
                If rhs = 0# Then
                    If prec >= 0.00001 Then
                        If Abs(lhs) < 0.00001 Then CompareValues = True
                    Else
                        If Abs(lhs) <= prec Then CompareValues = True
                    End If
                Else
                    If Abs(rhs) <= prec Then CompareValues = True
                End If
            Else
                If prec * Abs(lhs) - Abs(rhs - lhs) >= epsilon Then CompareValues = True
            End If
        Case slvLessThanEqual
            If rhs = 0# OrElse lhs = 0# Then
                If rhs = 0# Then
                    If prec >= 0.00001 Then
                        If Abs(lhs) < 0.00001 OrElse lhs <= 0# Then CompareValues = True
                    Else
                        If Abs(lhs) <= prec OrElse lhs <= 0# Then CompareValues = True
                    End If
                Else
                    If Abs(rhs) <= prec OrElse rhs >= 0 Then CompareValues = True
                End If
            Else
                If prec * Abs(lhs) - (lhs - rhs) >= epsilon Then CompareValues = True
            End If
        Case slvGreaterThanEqual
            If rhs = 0# OrElse lhs = 0# Then
                If rhs = 0# Then
                    If prec >= 0.00001 Then
                        If Abs(lhs) < 0.00001 OrElse lhs >= 0# Then CompareValues = True
                    Else
                        If Abs(lhs) <= prec OrElse lhs >= 0# Then CompareValues = True
                    End If
                Else
                    If Abs(rhs) <= prec OrElse rhs <= 0# Then CompareValues = True
                End If
            Else
                If prec * Abs(lhs) - (rhs - lhs) >= epsilon Then CompareValues = True
            End If
        End Select
    End Function

    Private Function HasLowerBound(decisionCell As Range) As Boolean
        Dim solver_num As Long
        Dim i As Long
        Dim ws As Worksheet
    
        HasLowerBound = False
    
        Set ws = decisionCell.Parent
    
        'find number of existing constraints
        solver_num = NameToLong("solver_num", ws)
    
        'loop through all contraints until found
        For i = 1 To solver_num
            If IsRangeInRange(decisionCell, ws.Names("solver_lhs" & i).RefersToRange) Then
                'check if cell has lower bound constraint
                If NameToLong("solver_rel" & i, ws) = slvGreaterThanEqual Then
                    HasLowerBound = True
                    Exit Function
                End If
            End If
        Next i
    End Function

    'searches name collections to determine if given range has a name
    Private Function GetNameOfRange(r As Range, Optional ByVal onlyVisible As Boolean = True, Optional ByVal workbookLevel As Boolean = True) As String
        Dim n As Name, r2 As Range
        If workbookLevel Then
            Dim wb As Workbook
            Set wb = r.Worksheet.Parent
            For Each n In wb.Names
                If n.Visible OrElse (Not onlyVisible) Then
                    If IsNameRange(n) Then
                        Set r2 = n.RefersToRange
                        If IsRangeSameRange(r, r2) Then
                            GetNameOfRange = n.Name
                            Exit Function
                        End If
                    End If
                End If
            Next n
        End If
    
        'if not found at workbook level, then look at ws level
        Dim ws As Worksheet
        Set ws = r.Worksheet
        For Each n In ws.Names
            If n.Visible OrElse (Not onlyVisible) Then
                If IsNameRange(n) Then
                    Set r2 = n.RefersToRange
                    If IsRangeSameRange(r, r2) Then
                        GetNameOfRange = n.Name
                        Exit Function
                    End If
                End If
            End If
        Next n

        If GetNameOfRange = vbNullString Then GetNameOfRange = r.Address
    End Function

    'determines if name refers to a range or a value
    Private Function IsNameRange(n As Name) As Boolean
        IsNameRange = (NameToRange(n) IsNot Nothing)
    End Function

    Private Function UnionCP(ParamArray ranges() As Variant) As Range
        'adapted from Chip Pearsons: http://www.cpearson.com/excel/BetterUnion.aspx
        'a Union operation that accepts parameters that are Nothing.
        Dim n As Long
        Dim rr As Range
        For n = LBound(ranges) To UBound(ranges)
            If IsObject(ranges(n)) Then
                If ranges(n) IsNot Nothing Then
                    If TypeOf ranges(n) Is Excel.Range Then
                        If rr IsNot Nothing Then
                            Set rr = Application.Union(rr, ranges(n))
                        Else
                            Set rr = ranges(n)
                        End If
                    End If
                End If
            End If
        Next n
        Set UnionCP = rr
    End Function

    Private Function ProperUnion(ParamArray ranges() As Variant) As Range
       'adapted from Chip Pearsons: http://www.cpearson.com/excel/BetterUnion.aspx
       'provides Union functionality without duplicating
       'cells when ranges overlap.
        Dim resR As Range
        Dim n As Long
        Dim r As Range
    
        If ranges(LBound(ranges)) IsNot Nothing Then Set resR = ranges(LBound(ranges))
        For n = LBound(ranges) + 1 To UBound(ranges)
            If ranges(n) IsNot Nothing Then
                For Each r In ranges(n).Cells
                    If Application.Intersect(resR, r) Is Nothing Then Set resR = UnionCP(resR, r)
                Next r
            End If
        Next n
        Set ProperUnion = resR
    End Function

    Private Function MergeRangesCellByCell(ByVal range1 As Range, ByVal range2 As Range) As Range
        'adapted from https://opensolver.org/excel-programming/
        Dim result As Range, cell As Range
        Set result = range1
        For Each cell In range2
            Set result = UnionCP(result, cell)
        Next cell
        Set MergeRangesCellByCell = result
    End Function

    Private Function RemoveRangeOverlap(r As Range) As Range
        'adapted from https://opensolver.org/excel-programming/
        Dim s As Range, a As Range, i As Long
    
        If r.Areas.Count = 1 Then
            Set RemoveRangeOverlap = r
            Exit Function
        End If
    
        Set s = r.Areas(1)
    
        For i = 2 To r.Areas.Count
            If Application.Intersect(s, r.Areas(i)) Is Nothing Then
                'just take the standard union
                Set s = UnionCP(s, r.Areas(i))
            Else
                'also see http://www.cpearson.com/excel/BetterUnion.aspx
                If s.Count < r.Areas(i).Count Then
                    Set s = MergeRangesCellByCell(r.Areas(i), s)
                Else
                    Set s = MergeRangesCellByCell(s, r.Areas(i))
                End If
            End If
        Next i
    
        Set RemoveRangeOverlap = s
    End Function

    Private Function Is1DVariant(a() As Variant) As Boolean
        Dim ub As Long
        On Error GoTo EH
        ub = UBound(a, 2)
        Is1DVariant = False
        Exit Function
    EH:
        Is1DVariant = True
    End Function
    
End Module
